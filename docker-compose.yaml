services:
  postgres:
    image: postgres:latest
    container_name: database
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ../dbdata:/var/lib/postgresql/data
    networks:
      - db-network
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
      start_interval: 5s
    restart: unless-stopped
    tty: true
    stdin_open: true

  migrations:
    build:
      context: .
      dockerfile: ./cmd/migrate/Dockerfile
    command: go run cmd/migrate/main.go newest
    container_name: migrations
    networks:
      - db-network
    environment:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USER: ${DB_USER}
        DB_NAME: ${DB_NAME}
        DB_SSLMODE: disable
        DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy

  my_service:
    build: ./
    container_name: service
    ports:
      - "${PORT}:${PORT}"
    networks:
        - db-network
    environment:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USER: ${DB_USER}
        DB_NAME: ${DB_NAME}
        DB_SSLMODE: disable
        DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      migrations:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

networks:
  db-network:
    driver: bridge
